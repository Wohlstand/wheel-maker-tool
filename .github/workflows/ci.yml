name: CI build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: MinSizeRel

jobs:
  linux:
    strategy:
       matrix:
         distro: [ubuntu-latest, ubuntu-18.04]
    runs-on: ${{ matrix.distro }}
    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      shell: bash
      run: |
        git submodule init
        git submodule update

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j 3

    - name: Create Package
      if: success()
      shell: bash
      run: |
          cd ${{github.workspace}}/build
          tar -cvzf HeLeCheLun-Linux-${{ matrix.distro }}.tar.gz HeLeCheLun

    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/build/HeLeCheLun-Linux-${{ matrix.distro }}.tar.gz
        name: HeLeCheLun MinSizeRel

  macos:
    strategy:
       matrix:
         arch: [x86_64, arm64]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        shell: bash
        run: |
          git submodule init
          git submodule update

      - name: CMake configure
        run: |
          cmake . -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B build

      - name: CMake build
        run: |
          cmake --build build --target all -- -j 3

      - name: Create Package
        if: success()
        shell: bash
        run: |
            cd build
            zip HeLeCheLun-macOS-${{ matrix.arch }}.zip HeLeCheLun

      - name: Upload artifact
        if: success()
        uses: actions/upload-artifact@v2
        with:
            path: build/HeLeCheLun-macOS-${{ matrix.arch }}.zip
            name: HeLeCheLun-macOS-${{ matrix.arch }} ${{env.BUILD_TYPE}}

  windows-msys2-cmake:
    runs-on: windows-latest
    strategy:
      matrix:
        include: [
          {installs: "MINGW32", pkg: "mingw-w64-i686-gcc mingw-w64-i686-cmake mingw-w64-i686-ninja zip"},
          {installs: "MINGW64", pkg: "mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja zip"},
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.installs }}
          update: true
          install: base-devel git autoconf ${{ matrix.pkg }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        shell: bash
        run: |
          git submodule init
          git submodule update

      - name: CMake configure
        run: |
          cmake . -G "Ninja" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B build

      - name: CMake build
        run: |
          cmake --build build --target all -- -j 3

      - name: Create Package
        if: success()
        shell: bash
        run: |
            cd build
            zip HeLeCheLun-Windows-${{ matrix.installs }}.zip HeLeCheLun.exe

      - name: Upload artifact
        if: success()
        uses: actions/upload-artifact@v2
        with:
            path: build/HeLeCheLun-Windows-${{ matrix.installs }}.zip
            name: HeLeCheLun${{ matrix.installs }} ${{env.BUILD_TYPE}}
